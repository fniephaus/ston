(name 'STON-Tests-fn.71' message 'Make tests compatible to Squeak:- Use ''as: Dictionary'' instead of ''asDictionary''- Use Random integers instead of UUIDs (they seem to behave different in Squeak)- Ignore order when comparing serialized strings- Skip Pharo-specific filesystem test' id 'c072c6c4-d639-410a-aede-daf27b7e620e' date '25 November 2016' time '4:08:45.477938 pm' author 'fn' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.70' message 'Bugfix to STONWriter>>#escapeUnicode: [thank you, Tomohiro Oda] code points between 16rFFF and 16rFFFF where encoded wrongly when #asciiOnly was trueAdd high code point string to STONWriteReadTests>>#testStringsMake STONReaderTests>>#testDeepStructure faster by creating a smaller data structure' id '4c19dd4b-c8f1-4184-ada1-83909c4a6e4a' date '24 November 2016' time '11:31:12.769488 am' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.69' message 'Allow #stonName to return a string instead of a symbol (reported by https://github.com/jecisc). Change STONReader>>#lookupClass to use #= instead of #== when comparing the result of #stonName.Change STONTestUser3 class>>#stonName to return a string as test case.' id '37f148af-a389-423f-bdab-8b67b27fab09' date '20 November 2016' time '8:25:25.135359 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.68' message 'In JSON compatibility mode STON should not encode single quotes. (Thanks Peter Uhnák for reporting this). Patch STONWriter>>#encodeCharacter:Fix the encoding of forward slash ($/). This was already in the (external) documentation. Patch STONWriter class>>#initializeSTONCharacters - force STONWriter class>>#initialize to change tooFix the representation of Time by adding nanoseconds when there are any. This was already in the (external) documentation. Patch Time>>#stonOn:Adjust unit tests accordingly (esp. STONWriterTests>>#testDoubleQuotedString). Minor comment changes.' id '70402f28-f0e8-44e9-8746-3539c4add09b' date '20 November 2016' time '7:48:46.115446 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.67' message 'Remove the option #allowComplexMapKeys from STONReader (to functionally always allow it; leave the accessor #allowComplexMapsKeys: as a no-op for backwards compatibility) - remove all usage, simplify implementation.' id '92a94566-972f-4084-aa37-a572de9cfe67' date '24 October 2016' time '10:36:51.944835 am' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.66' message 'When in JSON mode, STONWriter should also signal an STONWriterError when an Association is seen (thanks Peter Uhnák)Update #testRestrictedClassesInJSONMode to cover this case' id '9df675c2-98a7-4644-b4d3-2231ba7c7444' date '6 June 2016' time '10:34:19.068183 am' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.65' message 'Add STONWriteReadTests>>#testFileSystemSupport' id '2b50bcaf-ec9e-4b84-910f-56916f5d2dac' date '7 May 2016' time '11:39:07.311908 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.64' message 'New, better, more correct implementation of Dictionary/Set rehashing after reference resolution made them potentially unhealthy.See the new tests #testDictionaryWithIndirectReferenceKeys and #testSetWithIndirectReferenceElements for example cases that were not covered by the previous optimization.During resolution of references we count the number of unresolved references backwards so that we know when #stonProcessSubObjects: did actually resolve a reference (possible deep down). If that is the case we call a new hook called #stonPostReferenceResolution that does nothing by default. For Dictionary and Set #stonPostReferenceResolution is implemented as	self isHealthy ifFalse: [ self rehash ]	Now, rehashing is only done when absolutely necesary (this is crucial for performance). We even avoid the possibly expensive #isHealthy check when no references were actually resolved and hence no hashing could possibly change.  ' id '1401dc66-e503-4da1-bc7c-30dd0a4afa06' date '14 April 2016' time '2:17:59.88328 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.63' message 'Fix a bug where STONReferences occurring as keys in Dictionaries or elements in Sets caused those to be unhealthy after materialization. Thx to Peter Uhnák for reporting this issue.Add 3 new unit tests to STONReaderTests#testDictionaryWithReferenceKeys#testSetWithReferenceElements#testDeepStructureFix Detailschange the implementation of STONReader>>#processSubObjectsOf: from iterative to recursive (see version 39 of 29 November 2012, this might be a functional regression, see #testDeepStructure; cleanup of stack instance variable for later) so that #stonProcessSubObjects: can be overwritten with code being executed before or after full reference resolutionimho, recursion stack depth will be equal during both writing and reading, and should be acceptable.overwrite #stonProcessSubObjects: in Dictionary and Set to #rehash at the end, but only when needed (minimal optimalization, see Dictionary>>#containsStonReferenceAsKey and Set>>#containsStonReference)' id '0beb2322-b81a-46ee-a0e2-6648a808774a' date '6 April 2016' time '2:22:45.01986 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.62' message 'Improve class commentsAdd STONJSON facade class to make it more explicit that you can use STON for simple JSON parsing and generationAdd STONJSONTests to test JSON compatibility' id '097090ae-a1ca-4401-86b0-07d7d446a9dc' date '15 March 2016' time '5:08:19.634401 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.61' message 'Added support for characters not in the Basic Multilingual Plane encoding as a UTF-16 surrogate pairSee https://tools.ietf.org/html/rfc7159#section-7' id '20add575-ddb8-487b-bb4a-70b4594bfcac' date '24 February 2016' time '9:42:27.99865 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.60' message 'Add support to Interval so that it is no longer treated as a collection but as a normal object' id '09e568c4-7947-4f0e-82b0-52573998fe3e' date '24 February 2016' time '2:01:40.693715 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.59' message 'Added unit test for the ability to write and read Class and Metaclass instances using their global name' id '9f684bc1-45e1-4bfa-885b-c56ea178bfca' date '23 December 2015' time '10:51:06.830762 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.58' message 'Added test for custom Associations' id '1e20385e-f9dc-4ede-86da-7abbe21a3f93' date '15 August 2015' time '5:35:11.356145 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.57' message 'Added new STONCStyleCommentsSkipStream feature: Comments inside single and double quote delimited strings are ignored. Backslash escapes for single and double quotes inside strings are honored.' id 'ad125293-a41b-45a6-a0fe-016dd5e02f7b' date '17 July 2015' time '7:50:38.683873 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.56' message 'Introduction of STONWriter>>#asciiOnly: optionThis is an incompatible change.' id '19b08365-50b1-4837-84ec-ae4b13ed2b70' date '2 July 2015' time '3:42:19.211125 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.55' message 'Add 2 convenience methods:	STON class>>#fromStringWithComments:	STON class>>#fromStreamWithComments:	Add more unit tests for the new functionality' id '14ccb834-8db6-4577-aeb9-1bdd487c3ab8' date '9 June 2015' time '11:05:12.121701 am' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.54' message 'Add experimental STONCStyleCommentsSkipStream and tests' id '3dcb2c9c-6efe-4d62-bf36-3bbe91f09d08' date '8 June 2015' time '11:34:52.918771 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.53' message 'Critics run. Respond.' id 'b7e46d94-4d8f-4b14-85c6-e1cba580b67c' date '28 May 2015' time '3:58:14.065808 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.52' message 'Added STONReader>>#convertNewLines: and STONReader>>#newLine: to read and convert CR, LF, or CRLF inside strings and symbols as one chosen canonical newLineAdded STONWriter>>#keepNewLines: to write CR, LF or CRLF inside strings and symbols unencoded as one chosen canonical newLine Add unit tests #testConvertingNewLine #testKeepingNewLines and #testIllegalCharacterEscapesAdded some more documentation' id '8b393798-e0e0-4ca4-9f54-64e487c228cc' date '26 April 2015' time '11:54:29.166526 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.51' message 'Remove support for TimeStamp as it is deprecated in Pharo 4 and removed in Pharo 5' id '44a2460e-3ad4-4d60-9d16-0be61dd23afa' date '26 April 2015' time '7:47:54.90388 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.50' message 'Make Ordered/Small Dictionary tests resilient to missing classes' id '71194726-6c3b-40c1-98e8-abbdfb7acb45' date '10 April 2015' time '8:25:26.300795 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.49' message 'Added support for OrderedDictionary' id 'c97045f3-f89f-49d4-9162-2a6516a8205e' date '10 April 2015' time '3:32:33.665331 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.48' message 'Minor modifications after merging Christophe''s new Association support (some simplifications, allow nested associations, don''t use in #parseMapDo: for performance reasons).Added Object class>>#stonAllInstVarNames to allow customizing which instance variables get written or their order (see STONWriter>>#writeObject:)' id 'fa58cbdd-a453-4274-ac76-3754d36695cd' date '27 November 2014' time '11:20:51.78438 am' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-ChristopheDemarey.47' message 'Add support for associations as ''primitive'' type.' id '8c9b6d82-9231-47a2-aadd-096f39ab2fe4' date '7 November 2014' time '9:58:50.34515 am' author 'ChristopheDemarey' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.46' message 'Add STONReader>#acceptUnknownClasses: optionWhen true (default is false) an unknown object class will result in a map with an added property #className (thx Stéphane Ducasse for the suggetion)Added STON class>>#classNameKeyMoved #stonName from Class to Object classAdded STONReaderTests>>#testUnknownClasses' id 'e48a3d7c-6d8a-4899-943f-829ee4e8715d' date '12 August 2014' time '3:40:43.256364 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.44' message 'Fix to allow working with the empty Symbol #'''' (changed STONWriter>>#isSimpleSymbol: to return false for the empty symbol) [Thx Martin - tinchodias]' id '44f1860b-d960-4530-be30-ad6a0a1b3fa7' date '15 April 2014' time '2:16:37.880415 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.43' message 'Added explicit #stonOn: and #fromSton: methods to Text and RunArray who are inheriting the wrong behavior + unit test' id '89a8ad73-c664-4974-b111-02fd14287678' date '24 March 2014' time '2:30:08.212135 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.42' message 'Changed the implementation of STONWriter>>#writeObject: to skip nil instance variables unless Object>>#stonShouldWriteNilInstVars is overridden to be true' id '965f5e06-6db6-46d3-8724-cb9501357f95' date '14 November 2013' time '12:02:58.546038 am' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.41' message 'Added support for Small[Identity]Dictionary' id 'e1bd4c72-3d69-43af-96f3-420e01ae9d2c' date '17 September 2013' time '8:17:38.531008 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.40' message 'Added custom newline support to STONWriter' id 'afcdcc8a-9e20-4067-85a5-4c9a4be76189' date '7 March 2013' time '10:53:29.584 am' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.39' message 'moved/renamed STONBufferedReadStream -> ZnBufferedReadStream (into Zinc HTTP Components)' id '854ee094-9d25-410c-ba6c-af7d02ee9076' date '30 November 2012' time '11:03:18.209 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.38' message 'added STONTestMap class>>#classTree[Extended][:] to create some larger test object structures with cycles;added STONTests class helper methods #readFromFileNamed: and #write:toFileNamed: as well as #fastReadFromFileNamed: and #fastWrite:toFileNamed:;added STONBufferedReadStream to improve parsing performance' id 'f0fed4b1-b758-4aaf-bacb-f276dfa8eb66' date '30 November 2012' time '11:46:48.063 am' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.37' message 'update meta data' id '29122642-eec4-48e4-a9a6-be086656a70b' date '29 November 2012' time '3:58:21.866 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.36' message 'added STONLargeWriteReadTests to test  #optimizeForLargeStructures of STONReader and STONWriter using some special Fuel datastructures optimized for large sizes (these are standard in Pharo)' id 'dce2dc6c-1a5a-496e-b5a3-2fbc66565d21' date '29 November 2012' time '3:46:16.813 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.35' message 'added STONTests>>#testRoomExitCycles and STONTestMap based on the problematic cycle model by Stuart Herring (Thx!)' id '46f62d3a-4746-4720-a709-52113d0fb52e' date '29 November 2012' time '12:13:45.639 pm' author 'SvenVanCaekenberghe' ancestors ((name 'STON-Tests-SvenVanCaekenberghe.29' message 'this is a copy of Ston-Tests-SvenVanCaekenberghe.34 with the monticello package name changed from Ston-Tests to STON-Tests' id 'fc4432b5-2197-47ee-8dfe-947b37d16b89' date '26 October 2012' time '10:38:40.565 am' author 'SvenVanCaekenberghe' ancestors () stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())